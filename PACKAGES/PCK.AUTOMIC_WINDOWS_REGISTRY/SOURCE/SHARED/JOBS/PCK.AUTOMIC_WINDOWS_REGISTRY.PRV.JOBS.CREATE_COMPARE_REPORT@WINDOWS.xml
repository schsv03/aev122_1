<?xml version="1.0" encoding="UTF-8"?>
<jobs>
   <metadata>
      <row>
         <version>12.2.0</version>
      </row>
   </metadata>
   <general_attributes>
      <row>
         <minimum_ae_version>11.2</minimum_ae_version>
         <auto_deactivation>F</auto_deactivation>
         <child_flags>00000000000000000000000000000000</child_flags>
         <deactivation_condition>ANY_OK</deactivation_condition>
         <platform>WINDOWS</platform>
         <last_runtimes>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</last_runtimes>
         <max_parallel_action>1</max_parallel_action>
         <mrt_time>000000</mrt_time>
         <name>PCK.AUTOMIC_WINDOWS_REGISTRY.PRV.JOBS.CREATE_COMPARE_REPORT@WINDOWS</name>
         <type>JOBS</type>
         <inherit_output_filter>N</inherit_output_filter>
         <queue>CLIENT_QUEUE</queue>
         <description>Create compare report</description>
         <versioning_id>-739917299</versioning_id>
      </row>
   </general_attributes>
   <scripts>
      <row>
         <process><![CDATA[:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHANGE_DIRECTORY_TO_AGENT_BIN
:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS

$agentpath=get-location

$snapshotFolder=join-path $agentpath "snapshot\&UC4RB_SNAPSHOT_GUID#"

$reportFile="$snapshotFolder\compare_&$ACTIVATOR_RUNID#.xml"
$overviewReportFile="$snapshotFolder\OverviewSnapBOM.xml"

$guid="&UC4RB_SNAPSHOT_GUID#"
### read registry key path from Overview report
$snapXml=[XML](Get-Content $overviewReportFile)
$path=$snapXml.registrySnapshot.regPath

$currentDateTime=get-date -format "d/MM/%y HH:%m:%s"
###
# First create an overview report again
###

set-location registry::$path
$exitCode=$?
$xmlDoc='<?xml version="1.0" encoding="UTF-8"?>
<registrySnapshot date="' + $currentDateTime + '" guid="'+$guid+'" regPath="'+$path+'" type="reg" >'
if ( $exitCode ) {
  $dirs=,$path + (get-childitem . -rec|select-object -expand name)
  foreach ($j in $dirs)
  {
    set-location registry::$j
    $keyPath=(get-item . |select-object -expand name)
    if ( -not $keyPath ) {
      continue
    }
    $loc='<key path="'+$keyPath+'" >'
    $xmlDoc=$xmlDoc+$loc
    $props=(get-item . |select-object -expand property)

    foreach ($i in $props)
    {
      $value=get-itemproperty . $i |select-object -expand $i
      $str= '<property name="'+$i+'"  value="'+$value+'"/>'
      $xmlDoc=$xmlDoc+$str
    }
    $xmlDoc=$xmlDoc+"</key>"
  }
}
$xmlDoc=$xmlDoc+"</registrySnapshot>"
$doc=[xml]$xmlDoc
$doc.Save("$snapshotFolder\new-ov.xml")
###
#Compare original overview report with a new one
###
$compRepXml='<?xml version="1.0" encoding="UTF-8"?>
<registrySnapshot date="' + $currentDateTime + '" guid="'+$guid+'" regPath="'+$path+'" type="reg" >'

$xpath="/registrySnapshot/key"
$a=select-xml $snapXml -xpath $xpath
### checking if anything was deleted
foreach ($i in $a) {
  $attr=$i.Node.path
  $xquery='/registrySnapshot/key[@path="'+$attr+'"]'
  $res=select-xml $xquery $doc
  if ( ! $res ){
    if ( $attr -eq $Null ) {
       continue;
    }
    write-output "===snapshot is inconsistent==="
    $compRepXml=$compRepXml+'<key path="'+$attr+'" state="deleted"/>'
  } else {
    $compRepXml=$compRepXml+'<key path="'+$attr+'" state="equal"/>'
  }
  $xquery=$xquery+'/property'
  $props=select-xml $xquery $snapXml
  foreach($j in $props){
    $propName=$j.Node.name
    $propValue=$j.Node.value
    $lxquery=$xquery+'[@name="'+$propName+'"]'
    $lres=select-xml $lxquery $doc
    if (( ! $lres) -and ( $propName )) {
      write-output "===snapshot is inconsistent==="
      $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" value="'+$propValue+'" state="deleted"/>'
    } else {
      $snapPropValue=$j.Node.value
      $regPropValue=$lres.Node.value
      write-output "snapPropValue:$snapPropValue"
      write-output "regPropValue:$regPropValue"
      if (( $snapPropValue -cne $regPropValue ) -and ( $propName )) {
        write-output "===snapshot is inconsistent==="
        $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" oldValue="'+$snapPropValue+'" newValue="'+$regPropValue+'" state="changed"/>'
      } else {
        $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" value="'+$propValue+'" state="equal"/>'
      }
    }
  }
}
##################
#checking if anything was added
$xpath="/registrySnapshot/key"
#select all keys from current registry
$a=select-xml $doc -xpath $xpath

foreach ($i in $a) {
  $attr=$i.Node.path
  if ( ! $attr ) {
    continue
  }
  $xquery='/registrySnapshot/key[@path="'+$attr+'"]'
  # select the same path from original snapshot
  $res=select-xml $xquery $snapXml
  # if the same path not found in the new document check the nested levels
  if ( ! $res ){
    write-output "===snapshot is inconsistent==="
    $compRepXml=$compRepXml+'<key path="'+$attr+'" state="added"/>'
  }
  #checking what added beneath
  $xquery=$xquery+'/property'
  $props=select-xml $xquery $doc
  foreach($j in $props){
    $propName=$j.Node.name
    $propValue=$j.Node.value
    $lxquery=$xquery+'[@name="'+$propName+'"]'
    $lres=select-xml $lxquery $snapXml
    if (( ! $lres) -and ( $propName )) {
       write-output "===snapshot is inconsistent==="
       $compRepXml=$compRepXml+'<key path="'+$attr+'" name="'+$propName+'" value="'+$propValue+'" state="added"/>'
    }
  }
}
$compRepXml=$compRepXml+"</registrySnapshot>"
$compRepDoc=[xml]$compRepXml
$Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($False)
$w = New-Object System.Xml.XmlTextWriter($reportFile, $Utf8NoBomEncoding)
$compRepDoc.Save($w)
$w.Close()

:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS
:PSET &UC4RB_OUT_REPORT_FILE#="&UC4RB_AGENT_WORKING_DIR#\snapshot\&UC4RB_SNAPSHOT_GUID#\compare_&$ACTIVATOR_RUNID#.xml"]]></process>
      </row>
      <row>
         <pre_process>:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.PREPARE_JOB</pre_process>
      </row>
      <row>
         <post_process><![CDATA[:  SET &hnd# = PREP_PROCESS_REPORT("JOBS",,"REP")
:  PROCESS &hnd#
:    SET &LINE# = GET_PROCESS_LINE(&hnd#)
:     IF &LINE# = "===snapshot is inconsistent==="
:       PSET &UC4RB_CONTENT_STATUS#="Inconsistent"
:       TERM_PROCESS
:     ENDIF
:  ENDPROCESS]]></post_process>
      </row>
   </scripts>
   <job_attributes>
      <row>
         <activation_at_runtime>1</activation_at_runtime>
         <platform>WINDOWS</platform>
         <agent><![CDATA[<WIN>]]></agent>
         <job_report_path>2</job_report_path>
         <win_work_dir>c:\</win_work_dir>
         <win_typ>2</win_typ>
         <win_view>0</win_view>
         <win_logon_as_batch>0</win_logon_as_batch>
         <win_show_at_desktop>0</win_show_at_desktop>
         <win_report_by_script>0</win_report_by_script>
         <job_object>1</job_object>
         <win_cmd></win_cmd>
      </row>
   </job_attributes>
   <rollback_definitions>
      <row>
      </row>
   </rollback_definitions>
</jobs>
