<?xml version="1.0" encoding="UTF-8"?>
<jobs>
   <metadata>
      <row>
         <version>12.2.0</version>
      </row>
   </metadata>
   <general_attributes>
      <row>
         <minimum_ae_version>11.2</minimum_ae_version>
         <auto_deactivation>F</auto_deactivation>
         <child_flags>00000000000000000000000000000000</child_flags>
         <deactivation_condition>ANY_OK</deactivation_condition>
         <platform>WINDOWS</platform>
         <last_runtimes>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</last_runtimes>
         <max_parallel_action>1</max_parallel_action>
         <mrt_time>000000</mrt_time>
         <name>PCK.AUTOMIC_WINDOWS_SERVICE.PRV.JOB.CREATE_COMPARE_REPORT@WINDOWS</name>
         <type>JOBS</type>
         <inherit_output_filter>N</inherit_output_filter>
         <queue>CLIENT_QUEUE</queue>
         <versioning_id>-426235196</versioning_id>
      </row>
   </general_attributes>
   <scripts>
      <row>
         <process><![CDATA[:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHANGE_DIRECTORY_TO_AGENT_BIN
:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS

$agentpath=get-location

$snapshotFolder=join-path $agentpath "snapshot\&UC4RB_SNAPSHOT_GUID#"
$tempPath=join-path $snapshotFolder "temp"
$reportFile="$snapshotFolder\compare_&$ACTIVATOR_RUNID#.xml"
$overviewReportFile="$snapshotFolder\OverviewSnapBOM.xml"

$guid="&UC4RB_SNAPSHOT_GUID#"
### read registry key path from Overview report
$overviewReportDoc=[XML](Get-Content $overviewReportFile)
$serviceName="&UC4RB_SVC_SERVICE_NAME#"

$currentDateTime=get-date -format "d/MM/%y HH:%m:%s"
###
# First create an overview report again
###
:INC PCK.AUTOMIC_WINDOWS_SERVICE.PRV.INC.TRANSFORM_DATA
$scFiles=Get-ChildItem $tempPath | Where-Object {$_.PSIsContainer -eq $false} | Select-Object name

#first process output from sc commands and build a hash array
$res=@{}
$keys_to_process = "ERROR_CONTROL","START_TYPE","STATE","TYPE"
foreach ($fileName in $scFiles) {

 $fileName=join-path $tempPath $fileName.name
 $file=Get-Content $fileName
 foreach ($i in $file) {

  $i=$i -replace "^\s+",""
  $j=$i.split(":")

  $len=$j.length
  if ($len -gt 1 ) {
    if ($j[0]) {
      $key=$j[0].Trim()
      if ( $key -ceq "SERVICE_START_NAME" ) {
        $key = $key+" (Service run as user)"
      }
    }
    if ($len -gt 2) {
      $val=[System.string]::join(":",$j[1..$j.length]).Trim()
    } else {
      $val=$j[1].Trim()
    }
    if ( $res.Contains($key) -and $key -ne "SERVICE_NAME" ){
      $res[$key]=$res[$key]+", "+$val
    } else {
      $res[$key]=$val
    }
    if ( $keys_to_process -match $key ) {
      $res[$key]=$res[$key] -replace " ","-" -replace ",-",", " -replace "---", "-" -replace "--","-"
    }
    write-output "key:$key"
    write-output "val:$val"
  }
 }
}
write-output "--------------------------------------------"
write-output $res

$xmlDoc='<?xml version="1.0" encoding="UTF-8"?>
<snapshot date="' + $currentDateTime + '" guid="'+$guid+'" serviceName="'+$serviceName+'" type="svc" >'
$xmlDoc=$xmlDoc+'<service>'
foreach($k in $res.Keys) {
 $value=$res[$k]
 $value=$value -replace '"',"&quot;"
 write-output "value:$value"
 $xmlDoc=$xmlDoc+'<property name="'+$k+'" value="'+$value+'"/>'
}
$xmlDoc=$xmlDoc+'</service>'
$xmlDoc=$xmlDoc+"</snapshot>"

$doc=[xml]$xmlDoc

###
#Compare original overview report with a new one
###

Function Strings_Symmetric_Diff($a,$b) {
  $newA=[System.Collections.ArrayList] $a.replace(", ",",").split(",")
  $newB=[System.Collections.ArrayList] $b.replace(", ",",").split(",")
  $tempA=New-Object System.Collections.ArrayList
  foreach ( $elem in $newA ) {
    if ( $newB.Contains($elem) ) {
      [void]$tempA.add($elem)
    }
  }
  foreach ( $elem in $tempA ) {
    $newA.Remove($elem)
    $newB.Remove($elem)
  }
  $retA=$newA -join ", "
  $retB=$newB -join ", "
  return $retA, $retB
}

$compRepXml='<?xml version="1.0" encoding="UTF-8"?>
<snapshot date="' + $currentDateTime + '" guid="'+$guid+'" serviceName="'+$serviceName+'" type="svc" >'

$compRepXml=$compRepXml+'<service>'
$properties=$doc.snapshot.service.property

#check if property was added
foreach($i in $properties) {
  $name=$i|select -expand name
  $value=$i|select -expand value
  $xpath='/snapshot/service/property[@name="'+$name+'"]'
  $res=select-xml $xpath $overviewReportDoc
  if(! $res) {
    write-output "===snapshot is inconsistent==="
    $compRepXml=$compRepXml+"<property name='"+$name+"' value='"+$value+"' state='added'/>"
  } else {
     # here we need to check if value has changed.
     $value2=$res.Node|select -expand value
     $compRepXml=$compRepXml+"<property name='"+$name+"'"
     if ( $value -cne $value2 ) {
       write-output "===snapshot is inconsistent==="
       if ( $name -eq "PRIVILEGES" -or $name -eq "DEPENDENCIES" ) {
         $retBindings=Strings_Symmetric_Diff $value $value2
         $value_nv=$retBindings[0]
         $value_nv=$value_nv -replace '"',"&quot;"
         $value_ov=$retBindings[1]
         $value_ov=$value_ov -replace '"',"&quot;"
         $compRepXml=$compRepXml+' value_ov="'+$value_ov+'" value_nv="'+$value_nv+'" state="changed" />'
       } else {
         $value=$value -replace '"',"&quot;"
         $value2=$value2 -replace '"',"&quot;"
         $compRepXml=$compRepXml+' value_ov="'+$value2+'" value_nv="'+$value+'" state="changed" />'
       }
     } else {
       $compRepXml=$compRepXml+" value='"+$value+"' state='equal'/>"
     }
  }
}

#checking if a property was deleted

$properties=$overviewReportDoc.snapshot.service.property
if ( $properties ) {
  foreach($i in $properties) {
    $name=$i|select -expand name
    $value=$i|select -expand value
    $xpath='/snapshot/service/property[@name="'+$name+'"]'
    $res=select-xml $xpath $doc
    if(! $res) {
      write-output "===snapshot is inconsistent==="
      $compRepXml=$compRepXml+"<property name='"+$name+"' value='"+$value+"' state='deleted'/>"
    }
  }
}

$compRepXml=$compRepXml+"</service>"
$compRepXml=$compRepXml+"</snapshot>"
$compRepDoc=[xml]$compRepXml
$Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($False)
$w = New-Object System.Xml.XmlTextWriter($reportFile, $Utf8NoBomEncoding)
$compRepDoc.Save($w)
$w.Close()

Remove-Item $tempPath -recurse

:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.CHECK_POWERSHELL_CMD@WINDOWS
:PSET &UC4RB_OUT_XSLT_FILE#="CompareSvcSnapshot.xslt"
:PSET &UC4RB_OUT_REPORT_FILE#="&UC4RB_AGENT_WORKING_DIR#\snapshot\&UC4RB_SNAPSHOT_GUID#\compare_&$ACTIVATOR_RUNID#.xml"

]]></process>
      </row>
      <row>
         <pre_process>:INCLUDE PCK.ITPA_SHARED.PRV.INCLUDE.PREPARE_JOB</pre_process>
      </row>
      <row>
         <post_process><![CDATA[:PSET &UC4RB_CONTENT_STATUS# = "Consistent"
:  SET &hnd# = PREP_PROCESS_REPORT("JOBS",,"REP")
:  PROCESS &hnd#
:    SET &LINE# = GET_PROCESS_LINE(&hnd#)
:     IF &LINE# = "===snapshot is inconsistent==="
:       PSET &UC4RB_CONTENT_STATUS#="Inconsistent"
:       TERM_PROCESS
:     ENDIF
:  ENDPROCESS]]></post_process>
      </row>
   </scripts>
   <job_attributes>
      <row>
         <activation_at_runtime>1</activation_at_runtime>
         <platform>WINDOWS</platform>
         <agent><![CDATA[<WIN>]]></agent>
         <job_report_path>2</job_report_path>
         <win_work_dir>c:\</win_work_dir>
         <win_typ>2</win_typ>
         <win_view>0</win_view>
         <win_logon_as_batch>0</win_logon_as_batch>
         <win_show_at_desktop>0</win_show_at_desktop>
         <win_report_by_script>0</win_report_by_script>
         <job_object></job_object>
         <win_cmd></win_cmd>
      </row>
   </job_attributes>
   <rollback_definitions>
      <row>
      </row>
   </rollback_definitions>
</jobs>
